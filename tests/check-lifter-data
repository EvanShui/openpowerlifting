#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for lifter-data/social-media.csv
# and assorted files that get compiled into "lifters.csv".
#
# Used as part of "make check".
#

import oplcsv
from usernames import get_username
import os
import sys

def redden(s):
    return "\033[1;31m" + s + "\033[0;m"

def enyellow(s):
    return "\033[1;33m" + s + "\033[0;m"

hitError = False  # Determines return value at end.

def perror(s):
    global hitError
    hitError = True
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    print(' ' + enyellow(s), file=sys.stderr)


def is_ascii(s):
    return len(s) == len(s.encode())


def get_database_nameset():
    names = set()

    for dirname, subdirs, files in os.walk(os.getcwd()):
        if not 'entries.csv' in files:
            continue

        csv = oplcsv.Csv(dirname + os.sep + 'entries.csv')
        if 'Name' in csv.fieldnames:
            nameidx = csv.index('Name')
            for row in csv.rows:
                names.add(row[nameidx])

    return names



def check_social_media(names):
    csv = oplcsv.Csv('lifter-data' + os.sep + 'social-media.csv')

    # Check columns.
    if len(csv.fieldnames) == 0:
        perror("No columns found.")
    if len(csv.fieldnames) >= 1 and csv.fieldnames[0] != "Name":
        perror("First column must be 'Name'.")
    if len(csv.fieldnames) >= 2 and csv.fieldnames[1] != "Instagram":
        perror("Second column must be 'Instagram'.")
    if len(csv.fieldnames) >= 3:
        perror("Too many columns.")

    lifters = set()
    instagrams = set()

    try:
        nameidx = csv.index('Name')
        instagramidx = csv.index('Instagram')
    except:
        return 1

    # Check rows.
    for row in csv.rows:
        if len(row) != len(csv.fieldnames):
            perror("Improper number of columns in row %s." % row)

        # Check for whitespace problems.
        for x in row:
            if x.strip() != x:
                perror("Extraneous whitespace in '%s.'" % x)
            if x.replace('  ',' ') != x:
                perror("Too much spacing in '%s'." % x)
            if x.strip() == '':
                perror("Blank column in row %s." % row)

        # Prevent duplicate lifters.
        if row[nameidx] in lifters:
            perror("Duplicate entry for lifter '%s'." % row[nameidx])
        else:
            lifters.add(row[nameidx])

        # Prevent duplicate instagrams.
        if row[instagramidx] in instagrams:
            perror("Instagram used by two different lifters: '%s'." % row[instagramidx])
        else:
            instagrams.add(row[instagramidx])

        # Make sure that every name occurs in the 'names' set.
        if not row[nameidx] in names:
            perror("Lifter does not exist in database: '%s'." % row[nameidx])


# Check (Name => Username) automatic compilation for duplicate entries.
# Duplicates need to be eliminated by forcibly overriding a name.
def check_usernames(names):
    usernames = dict()
    for name in names:
        username = get_username(name)
        if not username:
            perror('No username generated for Name "%s".' % name)
        elif not username[0].isalpha():
            perror('Username "%s" must start with a letter.' % username)
        elif not is_ascii(username):
            perror("Username is not ASCII: '%s'. Teach scripts/username.py." % username)

        if username in usernames:
            perror('Multiple users with username %s: "%s", "%s".' % (username, name,
                   usernames[username]))
        else:
            usernames[username] = name


def main():
    global hitError

    # Get a list of all the Name entries throughout the whole project.
    names = get_database_nameset()

    check_social_media(names)
    check_usernames(names)

    if hitError:
        return 1
    return 0

if __name__ == '__main__':
    if len(sys.argv) != 1:
        print(" Usage: %s" % sys.argv[0])
        sys.exit(1)
    sys.exit(main())
